{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"boschung.github.io Willkommen auf der GitlabPages-Seite von Patrick Boschung. Hier entstehen verschiedene DIY anleitungen nach dem KISS prinzip. Die zu findenden Inhalte k\u00f6nnten trotz sorgf\u00e4ltiger bearbeitung Fehler enthalten, also beim Kopierenvon Inhalten vorsichtig sein. Mein Technischer Projekt Background - Mitentwicklung eines IOT-Ger\u00e4tes in C - Erstellung einer Python-Testumgebung f\u00fcr IOT-Ger\u00e4te - Gitlab-Einrichtung f\u00fcr Continuous Integration und Continuous Delivery - Entwicklung von Motion Controllern f\u00fcr BLDC-Motoren (Tq, Positionierung, Geschwindigkeit) in C++ - Sensorevaluierung f\u00fcr hochpr\u00e4zise und hochzuverl\u00e4ssige Positionierung - Bluetooth-Antennenabstimmungen - K\u00fcnstliche Intelligenz f\u00fcr E-Mail Klassifizierungen im Support Private Projekte - Kommt demn\u00e4chst: Steuerung einer W\u00e4rmepumpe - Selbstinstallierende Microsoft- und Linux-Maschinen Skripte - WLAN 2.45 GHz Spektrumanalyzer - Autonome Aktoren mit Solarladeschaltung sowie Supercaps - LUSTAT Datenauswertung - Elektrischer Heizkreislauf 20KW - Diverse Homepages - RaspberryPi IOT Switch mit Flask und Waved Schulen - Certificate of Advanced Studies in Arteficial Intelligence an der Hochschule Luzern - Bachelor of Science in Elektrotechnik an der Hochschule Luzern - IELTS Certificate Canadian English - Ausbildung zum Elektroniker am BBZS Kontakt","title":"About"},{"location":"#boschunggithubio","text":"Willkommen auf der GitlabPages-Seite von Patrick Boschung. Hier entstehen verschiedene DIY anleitungen nach dem KISS prinzip. Die zu findenden Inhalte k\u00f6nnten trotz sorgf\u00e4ltiger bearbeitung Fehler enthalten, also beim Kopierenvon Inhalten vorsichtig sein. Mein Technischer Projekt Background - Mitentwicklung eines IOT-Ger\u00e4tes in C - Erstellung einer Python-Testumgebung f\u00fcr IOT-Ger\u00e4te - Gitlab-Einrichtung f\u00fcr Continuous Integration und Continuous Delivery - Entwicklung von Motion Controllern f\u00fcr BLDC-Motoren (Tq, Positionierung, Geschwindigkeit) in C++ - Sensorevaluierung f\u00fcr hochpr\u00e4zise und hochzuverl\u00e4ssige Positionierung - Bluetooth-Antennenabstimmungen - K\u00fcnstliche Intelligenz f\u00fcr E-Mail Klassifizierungen im Support Private Projekte - Kommt demn\u00e4chst: Steuerung einer W\u00e4rmepumpe - Selbstinstallierende Microsoft- und Linux-Maschinen Skripte - WLAN 2.45 GHz Spektrumanalyzer - Autonome Aktoren mit Solarladeschaltung sowie Supercaps - LUSTAT Datenauswertung - Elektrischer Heizkreislauf 20KW - Diverse Homepages - RaspberryPi IOT Switch mit Flask und Waved Schulen - Certificate of Advanced Studies in Arteficial Intelligence an der Hochschule Luzern - Bachelor of Science in Elektrotechnik an der Hochschule Luzern - IELTS Certificate Canadian English - Ausbildung zum Elektroniker am BBZS Kontakt","title":"boschung.github.io"},{"location":"chickendoor/","text":"ChickenDoor This is a simple guide to build a DIY automated ChickenDoor. Project The project is realized with an ESP32 and micropython. - Used a foto resistor to detect night and day - Used a servo motor out of a RC car - 4W solar pannel to supply an old car battery - Built a 5 V buck converter to supply the ESP32 with 5V - Used 5V Supercaps to supply the servo motor Mechanics A weight optimized door with a counter weight is used. An arm with the size radius, is mounted on the servo that moves 90\u00b0. Bow = Lifting door Height Bow = 2 * pi * Radius * (Alpha / 360\u00b0) Electronic Firmware at Github https://github.com/boschung/ChickenDoor Fix ESP32 Error: \u201cFailed to connect to ESP32: Timed out waiting for packet header\u201d Use a 100uF between EN and GND https://randomnerdtutorials.com/solved-failed-to-connect-to-esp32-timed-out-waiting-for-packet-header/ Further implementations Deepsleep Modes could reduce the power that is used. Replace the foto sensor by an algorithm \"time to position dependent day light\". Time synchronisation could be done online.","title":"Chickendoor"},{"location":"chickendoor/#chickendoor","text":"This is a simple guide to build a DIY automated ChickenDoor.","title":"ChickenDoor"},{"location":"chickendoor/#project","text":"The project is realized with an ESP32 and micropython. - Used a foto resistor to detect night and day - Used a servo motor out of a RC car - 4W solar pannel to supply an old car battery - Built a 5 V buck converter to supply the ESP32 with 5V - Used 5V Supercaps to supply the servo motor","title":"Project"},{"location":"chickendoor/#mechanics","text":"A weight optimized door with a counter weight is used. An arm with the size radius, is mounted on the servo that moves 90\u00b0. Bow = Lifting door Height Bow = 2 * pi * Radius * (Alpha / 360\u00b0)","title":"Mechanics"},{"location":"chickendoor/#electronic","text":"","title":"Electronic"},{"location":"chickendoor/#firmware-at-github","text":"https://github.com/boschung/ChickenDoor","title":"Firmware at Github"},{"location":"chickendoor/#fix-esp32","text":"Error: \u201cFailed to connect to ESP32: Timed out waiting for packet header\u201d Use a 100uF between EN and GND https://randomnerdtutorials.com/solved-failed-to-connect-to-esp32-timed-out-waiting-for-packet-header/","title":"Fix ESP32"},{"location":"chickendoor/#further-implementations","text":"Deepsleep Modes could reduce the power that is used. Replace the foto sensor by an algorithm \"time to position dependent day light\". Time synchronisation could be done online.","title":"Further implementations"},{"location":"mkdocsuseage/","text":"How to use mkdocs This is a simple guide to create a mkdocs homepage, with nice markdown files. Installation Install Python then you need this package: python -m pip install mkdocs Create mkdocs mkdocs new my-project Use mkdocs To review the created page go to the top folder: - mkdocs serve - goto: http://127.0.0.1:8000/ Create - mkdocs build - Upload this build to the FTP server more information at https://www.mkdocs.org/","title":"mkdocs"},{"location":"mkdocsuseage/#how-to-use-mkdocs","text":"This is a simple guide to create a mkdocs homepage, with nice markdown files.","title":"How to use mkdocs"},{"location":"mkdocsuseage/#installation","text":"Install Python then you need this package: python -m pip install mkdocs","title":"Installation"},{"location":"mkdocsuseage/#create-mkdocs","text":"mkdocs new my-project","title":"Create mkdocs"},{"location":"mkdocsuseage/#use-mkdocs","text":"To review the created page go to the top folder: - mkdocs serve - goto: http://127.0.0.1:8000/ Create - mkdocs build - Upload this build to the FTP server","title":"Use mkdocs"},{"location":"mkdocsuseage/#more-information-at","text":"https://www.mkdocs.org/","title":"more information at"},{"location":"notDocumenteYet/","text":"Projects There are some further Projects on the following topics: Electronic heater regulator 20 KW Jupyter Notebook Electromagnet Calculation Energy calculation on a single house mycropython with esp32 Mousemanipulation Tor IP Install Scripts Win/Ubuntu Python Environments ...","title":"Projects"},{"location":"notDocumenteYet/#projects","text":"There are some further Projects on the following topics: Electronic heater regulator 20 KW Jupyter Notebook Electromagnet Calculation Energy calculation on a single house mycropython with esp32 Mousemanipulation Tor IP Install Scripts Win/Ubuntu Python Environments ...","title":"Projects"},{"location":"spectrumanalyzer/","text":"Cheepest WLAN Spectrumanalyzor This is a simple Guide for a DIY Spectrumanalyzor with an ESP32 and the Arduino IDE. The code is based on the work of \u0141ukasz Podkalicki (http://blog.podkalicki.com/esp32-wifi-sniffer/) Gui The gui is a console application, simple to acess with Putty for example. Source Github","title":"Spectrumanalyzer"},{"location":"spectrumanalyzer/#cheepest-wlan-spectrumanalyzor","text":"This is a simple Guide for a DIY Spectrumanalyzor with an ESP32 and the Arduino IDE. The code is based on the work of \u0141ukasz Podkalicki (http://blog.podkalicki.com/esp32-wifi-sniffer/)","title":"Cheepest WLAN Spectrumanalyzor"},{"location":"spectrumanalyzer/#gui","text":"The gui is a console application, simple to acess with Putty for example.","title":"Gui"},{"location":"spectrumanalyzer/#source","text":"Github","title":"Source"}]}